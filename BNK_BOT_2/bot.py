import logging
import re
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

BOT_TOKEN = "8199873882:AAE4x2ARLf7bR0fC9ykeOyHsrinT9JPIdRM"

user_data = {}

def parse_report(text: str):
    try:
        result = {
            "–ü–∞–∫–æ–≤": 0,
            "–í–µ—Å": 0,
            "–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞": 0,
            "–§–ª–µ–∫—Å–∞": 0,
            "–≠–∫—Å—Ç—Ä—É–∑–∏—è_–º": 0,
            "–≠–∫—Å—Ç—Ä—É–∑–∏—è_—Ç": 0,
            "–ò—Ç–æ–≥–æ": 0
        }
        lines = text.splitlines()
        for line in lines:
            line = line.strip().lower()
            if line.startswith("–ø–∞–∫–æ–≤"):
                result["–ü–∞–∫–æ–≤"] = int(re.findall(r"\d+", line)[0])
            elif line.startswith("–≤–µ—Å"):
                result["–í–µ—Å"] = int(re.findall(r"\d+", line)[0])
            elif "–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞" in line:
                result["–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞"] = int(re.findall(r"\d+", line)[0])
            elif "—Ñ–ª–µ–∫—Å" in line:
                result["–§–ª–µ–∫—Å–∞"] = int(re.findall(r"\d+", line)[0])
            elif "—ç–∫—Å—Ç—Ä—É–∑–∏—è" in line:
                m = re.search(r"–º(\d+)", line)
                t = re.search(r"—Ç(\d+)", line)
                if m: result["–≠–∫—Å—Ç—Ä—É–∑–∏—è_–º"] = int(m.group(1))
                if t: result["–≠–∫—Å—Ç—Ä—É–∑–∏—è_—Ç"] = int(t.group(1))
            elif line.startswith("–∏—Ç–æ–≥–æ"):
                result["–ò—Ç–æ–≥–æ"] = int(re.findall(r"\d+", line)[0])
        return result
    except Exception as e:
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ—Ç—á—ë—Ç ‚Äî —è –≤—Å—ë –ø–æ—Å—á–∏—Ç–∞—é!")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply = "üìä –°—É–º–º–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n"
    for user, stats in user_data.items():
        reply += f"\nüë§ {user}:\n"
        for key, val in stats.items():
            reply += f"  {key}: {val}\n"
    await update.message.reply_text(reply or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user = update.message.from_user.first_name
    parsed = parse_report(text)
    if not parsed:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç—á—ë—Ç.")
        return
    if user not in user_data:
        user_data[user] = {k: 0 for k in parsed}
    for k in parsed:
        user_data[user][k] += parsed[k]
    reply = (
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ –æ—Ç {user}:\n"
        f"üì¶ –ü–∞–∫–æ–≤: {parsed['–ü–∞–∫–æ–≤']}\n"
        f"‚öñÔ∏è –í–µ—Å: {parsed['–í–µ—Å']}\n"
        f"‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã:\n"
        f"  üßµ –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {parsed['–ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞']}\n"
        f"  üé® –§–ª–µ–∫—Å–∞: {parsed['–§–ª–µ–∫—Å–∞']}\n"
        f"  üè≠ –≠–∫—Å—Ç—Ä—É–∑–∏—è: –º{parsed['–≠–∫—Å—Ç—Ä—É–∑–∏—è_–º']} —Ç{parsed['–≠–∫—Å—Ç—Ä—É–∑–∏—è_—Ç']}\n"
        f"‚ôªÔ∏è –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {parsed['–ò—Ç–æ–≥–æ']}"
    )
    await update.message.reply_text(reply)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()