import os
import csv
import re
import requests
from datetime import datetime
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, filters, ContextTypes
import pandas as pd

TELEGRAM_TOKEN = os.environ["8199873882:AAE4x2ARLf7bR0fC9ykeOyHsrinT9JPIdRM"]
CHAT_ID = os.environ["TELEGRAM_CHAT_ID"]
HA_URL = os.environ["HA_URL"]
HA_TOKEN = os.environ["HA_TOKEN"]
HEADERS = {"Authorization": f"Bearer {HA_TOKEN}", "Content-Type": "application/json"}

LOG_FILE = "/data/log.csv"

FIELDNAMES = ["–¥–∞—Ç–∞", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ø–∞–∫–æ–≤", "–≤–µ—Å", "–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞", "—Ñ–ª–µ–∫—Å–∞", "—ç–∫—Å—Ç—Ä—É–∑–∏—è", "–∏—Ç–æ–≥–æ"]

def ensure_log_file():
    if not os.path.exists(LOG_FILE):
        with open(LOG_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.DictWriter(f, fieldnames=FIELDNAMES)
            writer.writeheader()

def parse_message(username, text):
    result = {
        "–¥–∞—Ç–∞": datetime.now().strftime("%Y-%m-%d"),
        "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": username,
        "–ø–∞–∫–æ–≤": 0,
        "–≤–µ—Å": 0,
        "–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞": 0,
        "—Ñ–ª–µ–∫—Å–∞": 0,
        "—ç–∫—Å—Ç—Ä—É–∑–∏—è": "",
        "–∏—Ç–æ–≥–æ": 0
    }
    lines = text.lower().splitlines()
    for line in lines:
        if "–ø–∞–∫–æ–≤" in line:
            result["–ø–∞–∫–æ–≤"] = int(re.search(r"\d+", line).group())
        elif "–≤–µ—Å" in line:
            result["–≤–µ—Å"] = int(re.search(r"\d+", line).group())
        elif "–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞" in line:
            result["–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞"] = int(re.search(r"\d+", line).group())
        elif "—Ñ–ª–µ–∫—Å–æ" in line or "—Ñ–ª–µ–∫—Å–∞" in line:
            result["—Ñ–ª–µ–∫—Å–∞"] = int(re.search(r"\d+", line).group())
        elif "—ç–∫—Å—Ç—Ä—É–∑–∏—è" in line:
            result["—ç–∫—Å—Ç—Ä—É–∑–∏—è"] = line.split("—ç–∫—Å—Ç—Ä—É–∑–∏—è")[-1].strip()
        elif "–∏—Ç–æ–≥–æ" in line:
            result["–∏—Ç–æ–≥–æ"] = int(re.search(r"\d+", line).group())
    return result

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.message.chat_id) != CHAT_ID:
        return
    username = update.message.from_user.username or "unknown"
    text = update.message.text
    data = parse_message(username, text)

    ensure_log_file()
    with open(LOG_FILE, "a", newline="", encoding="utf-8") as f:
        writer = csv.DictWriter(f, fieldnames=FIELDNAMES)
        writer.writerow(data)

    reply = f"üòä –ü—Ä–∏–Ω—è—Ç–æ –æ—Ç @{username}:
"
    reply += f"üì¶ –ü–∞–∫–æ–≤: {data['–ø–∞–∫–æ–≤']}
"
    reply += f"‚öñÔ∏è –í–µ—Å: {data['–≤–µ—Å']} –∫–≥
"
    reply += f"üîß –ü–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞: {data['–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞']}
"
    reply += f"üñ®Ô∏è –§–ª–µ–∫—Å–∞: {data['—Ñ–ª–µ–∫—Å–∞']}
"
    reply += f"üè≠ –≠–∫—Å—Ç—Ä—É–∑–∏—è: {data['—ç–∫—Å—Ç—Ä—É–∑–∏—è']}
"
    reply += f"‚ôªÔ∏è –ò—Ç–æ–≥–æ –æ—Ç—Ö–æ–¥–æ–≤: {data['–∏—Ç–æ–≥–æ']}"

    await update.message.reply_text(reply)

async def handle_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists(LOG_FILE):
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    df = pd.read_csv(LOG_FILE)
    grouped = df.groupby("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å").agg({
        "–ø–∞–∫–æ–≤": "sum",
        "–≤–µ—Å": "sum",
        "–∏—Ç–æ–≥–æ": "sum"
    }).reset_index()

    reply = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:

"
    for _, row in grouped.iterrows():
        reply += f"üë§ @{row['–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å']}
"
        reply += f"  üì¶ –ü–∞–∫–æ–≤: {row['–ø–∞–∫–æ–≤']}
"
        reply += f"  ‚öñÔ∏è –í–µ—Å: {row['–≤–µ—Å']} –∫–≥
"
        reply += f"  ‚ôªÔ∏è –û—Ç—Ö–æ–¥—ã: {row['–∏—Ç–æ–≥–æ']} –∫–≥

"
    reply += f"üîÑ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}"

    await update.message.reply_text(reply)

async def handle_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists(LOG_FILE):
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    df = pd.read_csv(LOG_FILE)
    excel_file = "/tmp/report.xlsx"
    df.to_excel(excel_file, index=False)

    await update.message.reply_document(InputFile(excel_file), caption="üìÑ –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω:")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(CommandHandler("stats", handle_stats))
    app.add_handler(CommandHandler("report", handle_report))
    app.run_polling()

if __name__ == "__main__":
    main()
