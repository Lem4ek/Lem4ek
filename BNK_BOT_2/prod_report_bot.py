import os
import re
from datetime import datetime
import pandas as pd
import matplotlib.pyplot as plt
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
data = []

# –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏
def parse_message(message: str) -> dict:
    result = {
        "timestamp": datetime.now(),
        "pack": None,
        "weight": None,
        "packetosvarka": None,
        "flexo": None,
        "extrusion": None,
        "total_waste": None,
    }

    lines = message.lower().splitlines()

    for line in lines:
        if "–ø–∞–∫–æ–≤" in line:
            match = re.search(r"–ø–∞–∫–æ–≤\s*[-‚Äì:]?\s*(\d+)", line)
            if match:
                result["pack"] = int(match.group(1))
        elif "–≤–µ—Å" in line:
            match = re.search(r"–≤–µ—Å\s*[-‚Äì:]?\s*(\d+)", line)
            if match:
                result["weight"] = int(match.group(1))
        elif "–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞" in line:
            match = re.search(r"–ø–∞–∫–µ—Ç–æ—Å–≤–∞—Ä–∫–∞\s*[-‚Äì:]?\s*(\d+)", line)
            if match:
                result["packetosvarka"] = int(match.group(1))
        elif "—Ñ–ª–µ–∫—Å" in line or "—Ñ–ª–µ–∫—Å–æ–≥—Ä–∞—Ñ–∏—è" in line:
            match = re.search(r"(—Ñ–ª–µ–∫—Å–æ–≥—Ä–∞—Ñ–∏—è|—Ñ–ª–µ–∫—Å–∞)\s*[-‚Äì:]?\s*(\d+)", line)
            if match:
                result["flexo"] = int(match.group(2))
        elif "—ç–∫—Å—Ç—Ä—É–∑–∏—è" in line:
            match = re.findall(r"\d+", line)
            if match:
                result["extrusion"] = sum(map(int, match))
        elif "–∏—Ç–æ–≥–æ" in line:
            match = re.search(r"–∏—Ç–æ–≥–æ\s*[-‚Äì:]?\s*(\d+)", line)
            if match:
                result["total_waste"] = int(match.group(1))

    return result


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    parsed = parse_message(update.message.text)
    data.append(parsed)
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ‚úÖ")


# –ö–æ–º–∞–Ω–¥–∞ /reset
async def reset_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global data
    data = []
    await update.message.reply_text("–î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã üîÑ")


# –ö–æ–º–∞–Ω–¥–∞ /excel
async def excel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not data:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    df = pd.DataFrame(data)
    filename = "report.xlsx"
    df.to_excel(filename, index=False)

    with open(filename, "rb") as f:
        await update.message.reply_document(document=f)

    os.remove(filename)


# –ö–æ–º–∞–Ω–¥–∞ /plot
async def plot_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not data:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")
        return

    df = pd.DataFrame(data)
    df["timestamp"] = pd.to_datetime(df["timestamp"])

    plt.figure()
    plt.plot(df["timestamp"], df["pack"], label="–ü–∞–∫–æ–≤")
    plt.plot(df["timestamp"], df["total_waste"], label="–û—Ç—Ö–æ–¥—ã")
    plt.xlabel("–í—Ä–µ–º—è")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    plt.title("–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –æ—Ç—Ö–æ–¥—ã")
    plt.legend()
    plt.tight_layout()

    image_file = "plot.png"
    plt.savefig(image_file)
    plt.close()

    with open(image_file, "rb") as f:
        await update.message.reply_photo(f)

    os.remove(image_file)


# –ì–ª–∞–≤–Ω—ã–π –∑–∞–ø—É—Å–∫
def main():
    TOKEN = os.getenv("8199873882:AAE4x2ARLf7bR0fC9ykeOyHsrinT9JPIdRM")
    if not TOKEN:
        print("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("reset", reset_command))
    app.add_handler(CommandHandler("excel", excel_command))
    app.add_handler(CommandHandler("plot", plot_command))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    app.run_polling()


if __name__ == "__main__":
    main()
